{"version":3,"sources":["public/src/modules/settings.js"],"names":["define","DEFAULT_PLUGINS","Settings","onReady","waitingJobs","helper","getHook","type","name","hook","plugin","$","data","attr","prop","plugins","toLowerCase","deepClone","obj","JSON","parse","stringify","createElement","tagName","text","element","document","k","hasOwnProperty","setAttribute","appendChild","createTextNode","initElement","call","destructElement","createElementOfType","cleanArray","array","trim","empty","cleaned","i","length","value","push","isTrue","isFalse","readValue","split","val","undefined","fillField","Array","join","toString","initFields","wrapper","each","ignored","field","keyParts","get","part","registerReadyJobs","amount","beforeReadyJobsDecreased","whenReady","callback","persistSettings","hash","settings","notify","_","socket","emit","values","err","app","alert","title","message","timeout","use","_error","cfg","registerPlugin","service","types","set","sync","persist","notSaved","fields","toArray","parentCfg","lastKey","j","load","formEl","key","utils","isNumber","e","ajaxify","deserialize","find","this","parents","toggleClass","is","window","trigger","on","flags","_unsaved","save","serializeObject","idx","inputEl","selectEl","require","arguments"],"mappings":"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","file":"public/src/modules/settings.js","sourcesContent":["'use strict';\n\n\ndefine('settings', function () {\n\tvar DEFAULT_PLUGINS = [\n\t\t'settings/checkbox',\n\t\t'settings/number',\n\t\t'settings/textarea',\n\t\t'settings/select',\n\t\t'settings/array',\n\t\t'settings/key',\n\t\t'settings/object',\n\t];\n\n\tvar Settings;\n\tvar onReady = [];\n\tvar waitingJobs = 0;\n\tvar helper;\n\n\t/**\n\t Returns the hook of given name that matches the given type or element.\n\t @param type The type of the element to get the matching hook for, or the element itself.\n\t @param name The name of the hook.\n\t */\n\tfunction getHook(type, name) {\n\t\tvar hook;\n\t\tvar plugin;\n\t\tif (typeof type !== 'string') {\n\t\t\ttype = $(type);\n\t\t\ttype = type.data('type') || type.attr('type') || type.prop('tagName');\n\t\t}\n\t\tplugin = Settings.plugins[type.toLowerCase()];\n\t\tif (plugin == null) {\n\t\t\treturn;\n\t\t}\n\t\thook = plugin[name];\n\t\tif (typeof hook === 'function') {\n\t\t\treturn hook;\n\t\t}\n\t\treturn null;\n\t}\n\n\thelper = {\n\t\t/**\n\t\t @returns Object A deep clone of the given object.\n\t\t */\n\t\tdeepClone: function (obj) {\n\t\t\tif (typeof obj === 'object') {\n\t\t\t\treturn JSON.parse(JSON.stringify(obj));\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t\t/**\n\t\t Creates a new Element with given data.\n\t\t @param tagName The tag-name of the element to create.\n\t\t @param data The attributes to set.\n\t\t @param text The text to add into the element.\n\t\t @returns HTMLElement The created element.\n\t\t */\n\t\tcreateElement: function (tagName, data, text) {\n\t\t\tvar element = document.createElement(tagName);\n\t\t\tfor (var k in data) {\n\t\t\t\tif (data.hasOwnProperty(k)) {\n\t\t\t\t\telement.setAttribute(k, data[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (text) {\n\t\t\t\telement.appendChild(document.createTextNode(text));\n\t\t\t}\n\t\t\treturn element;\n\t\t},\n\t\t/**\n\t\t Calls the init-hook of the given element.\n\t\t @param element The element to initialize.\n\t\t */\n\t\tinitElement: function (element) {\n\t\t\tvar hook = getHook(element, 'init');\n\t\t\tif (hook != null) {\n\t\t\t\thook.call(Settings, $(element));\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t Calls the destruct-hook of the given element.\n\t\t @param element The element to destruct.\n\t\t */\n\t\tdestructElement: function (element) {\n\t\t\tvar hook = getHook(element, 'destruct');\n\t\t\tif (hook != null) {\n\t\t\t\thook.call(Settings, $(element));\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t Creates and initializes a new element.\n\t\t @param type The type of the new element.\n\t\t @param tagName The tag-name of the new element.\n\t\t @param data The data to forward to create-hook or use as attributes.\n\t\t @returns JQuery The created element.\n\t\t */\n\t\tcreateElementOfType: function (type, tagName, data) {\n\t\t\tvar element;\n\t\t\tvar hook = getHook(type, 'create');\n\t\t\tif (hook != null) {\n\t\t\t\telement = $(hook.call(Settings, type, tagName, data));\n\t\t\t} else {\n\t\t\t\tif (data == null) {\n\t\t\t\t\tdata = {};\n\t\t\t\t}\n\t\t\t\tif (type != null) {\n\t\t\t\t\tdata.type = type;\n\t\t\t\t}\n\t\t\t\telement = $(helper.createElement(tagName || 'input', data));\n\t\t\t}\n\t\t\telement.data('type', type);\n\t\t\thelper.initElement(element);\n\t\t\treturn element;\n\t\t},\n\t\t/**\n\t\t Creates a new Array that contains values of given Array depending on trim and empty.\n\t\t @param array The array to clean.\n\t\t @param trim Whether to trim each value if it has a trim-function.\n\t\t @param empty Whether empty values should get added.\n\t\t @returns Array The filtered and/or modified Array.\n\t\t */\n\t\tcleanArray: function (array, trim, empty) {\n\t\t\tvar cleaned = [];\n\t\t\tif (!trim && empty) {\n\t\t\t\treturn array;\n\t\t\t}\n\t\t\tfor (var i = 0; i < array.length; i += 1) {\n\t\t\t\tvar value = array[i];\n\t\t\t\tif (trim) {\n\t\t\t\t\tif (value === !!value) {\n\t\t\t\t\t\tvalue = +value;\n\t\t\t\t\t} else if (value && typeof value.trim === 'function') {\n\t\t\t\t\t\tvalue = value.trim();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (empty || (value != null && value.length)) {\n\t\t\t\t\tcleaned.push(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cleaned;\n\t\t},\n\t\tisTrue: function (value) {\n\t\t\treturn value === 'true' || +value === 1;\n\t\t},\n\t\tisFalse: function (value) {\n\t\t\treturn value === 'false' || +value === 0;\n\t\t},\n\t\t/**\n\t\t Calls the get-hook of the given element and returns its result.\n\t\t If no hook is specified it gets treated as input-field.\n\t\t @param element The element of that the value should get read.\n\t\t @returns Object The value of the element.\n\t\t */\n\t\treadValue: function (element) {\n\t\t\tvar empty = !helper.isFalse(element.data('empty'));\n\t\t\tvar trim = !helper.isFalse(element.data('trim'));\n\t\t\tvar split = element.data('split');\n\t\t\tvar hook = getHook(element, 'get');\n\t\t\tvar value;\n\t\t\tif (hook != null) {\n\t\t\t\treturn hook.call(Settings, element, trim, empty);\n\t\t\t}\n\t\t\tif (split != null) {\n\t\t\t\tempty = helper.isTrue(element.data('empty')); // default empty-value is false for arrays\n\t\t\t\tvalue = element.val();\n\t\t\t\tvar array = (value != null && value.split(split || ',')) || [];\n\t\t\t\treturn helper.cleanArray(array, trim, empty);\n\t\t\t}\n\t\t\tvalue = element.val();\n\t\t\tif (trim && value != null && typeof value.trim === 'function') {\n\t\t\t\tvalue = value.trim();\n\t\t\t}\n\t\t\tif (empty || (value !== undefined && (value == null || value.length !== 0))) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t Calls the set-hook of the given element.\n\t\t If no hook is specified it gets treated as input-field.\n\t\t @param element The JQuery-Object of the element to fill.\n\t\t @param value The value to set.\n\t\t */\n\t\tfillField: function (element, value) {\n\t\t\tvar hook = getHook(element, 'set');\n\t\t\tvar trim = element.data('trim');\n\t\t\ttrim = trim !== 'false' && +trim !== 0;\n\t\t\tif (hook != null) {\n\t\t\t\treturn hook.call(Settings, element, value, trim);\n\t\t\t}\n\t\t\tif (value instanceof Array) {\n\t\t\t\tvalue = value.join(element.data('split') || (trim ? ', ' : ','));\n\t\t\t}\n\t\t\tif (trim && value && typeof value.trim === 'function') {\n\t\t\t\tvalue = value.trim();\n\t\t\t\tif (typeof value.toString === 'function') {\n\t\t\t\t\tvalue = value.toString();\n\t\t\t\t}\n\t\t\t} else if (value != null) {\n\t\t\t\tif (typeof value.toString === 'function') {\n\t\t\t\t\tvalue = value.toString();\n\t\t\t\t}\n\t\t\t\tif (trim) {\n\t\t\t\t\tvalue = value.trim();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalue = '';\n\t\t\t}\n\t\t\tif (value !== undefined) {\n\t\t\t\telement.val(value);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t Calls the init-hook and {@link helper.fillField} on each field within wrapper-object.\n\t\t @param wrapper The wrapper-element to set settings within.\n\t\t */\n\t\tinitFields: function (wrapper) {\n\t\t\t$('[data-key]', wrapper).each(function (ignored, field) {\n\t\t\t\tfield = $(field);\n\t\t\t\tvar hook = getHook(field, 'init');\n\t\t\t\tvar keyParts = field.data('key').split('.');\n\t\t\t\tvar value = Settings.get();\n\t\t\t\tif (hook != null) {\n\t\t\t\t\thook.call(Settings, field);\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < keyParts.length; i += 1) {\n\t\t\t\t\tvar part = keyParts[i];\n\t\t\t\t\tif (part && value != null) {\n\t\t\t\t\t\tvalue = value[part];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\thelper.fillField(field, value);\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t Increases the amount of jobs before settings are ready by given amount.\n\t\t @param amount The amount of jobs to register.\n\t\t */\n\t\tregisterReadyJobs: function (amount) {\n\t\t\twaitingJobs += amount;\n\t\t\treturn waitingJobs;\n\t\t},\n\t\t/**\n\t\t Decreases the amount of jobs before settings are ready by given amount or 1.\n\t\t If the amount is less or equal 0 all callbacks registered by {@link helper.whenReady} get called.\n\t\t @param amount The amount of jobs that finished.\n\t\t */\n\t\tbeforeReadyJobsDecreased: function (amount) {\n\t\t\tif (amount == null) {\n\t\t\t\tamount = 1;\n\t\t\t}\n\t\t\tif (waitingJobs > 0) {\n\t\t\t\twaitingJobs -= amount;\n\t\t\t\tif (waitingJobs <= 0) {\n\t\t\t\t\tfor (var i = 0; i < onReady.length; i += 1) {\n\t\t\t\t\t\tonReady[i]();\n\t\t\t\t\t}\n\t\t\t\t\tonReady = [];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t Calls the given callback when the settings are ready.\n\t\t @param callback The callback.\n\t\t */\n\t\twhenReady: function (callback) {\n\t\t\tif (waitingJobs <= 0) {\n\t\t\t\tcallback();\n\t\t\t} else {\n\t\t\t\tonReady.push(callback);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t Persists the given settings with given hash.\n\t\t @param hash The hash to use as settings-id.\n\t\t @param settings The settings-object to persist.\n\t\t @param notify Whether to send notification when settings got saved.\n\t\t @param callback The callback to call when done.\n\t\t */\n\t\tpersistSettings: function (hash, settings, notify, callback) {\n\t\t\tif (settings != null && settings._ != null && typeof settings._ !== 'string') {\n\t\t\t\tsettings = helper.deepClone(settings);\n\t\t\t\tsettings._ = JSON.stringify(settings._);\n\t\t\t}\n\t\t\tsocket.emit('admin.settings.set', {\n\t\t\t\thash: hash,\n\t\t\t\tvalues: settings,\n\t\t\t}, function (err) {\n\t\t\t\tif (notify) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tapp.alert({\n\t\t\t\t\t\t\ttitle: 'Settings Not Saved',\n\t\t\t\t\t\t\ttype: 'danger',\n\t\t\t\t\t\t\tmessage: 'NodeBB failed to save the settings.',\n\t\t\t\t\t\t\ttimeout: 5000,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tapp.alert({\n\t\t\t\t\t\t\ttitle: 'Settings Saved',\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tmessage: 'Settings have been successfully saved',\n\t\t\t\t\t\t\ttimeout: 2500,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\tcallback(err);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t Sets the settings to use to given settings.\n\t\t @param settings The settings to use.\n\t\t */\n\t\tuse: function (settings) {\n\t\t\ttry {\n\t\t\t\tsettings._ = JSON.parse(settings._);\n\t\t\t} catch (_error) {}\n\t\t\tSettings.cfg = settings;\n\t\t},\n\t};\n\n\n\tSettings = {\n\t\thelper: helper,\n\t\tplugins: {},\n\t\tcfg: {},\n\n\t\t/**\n\t\t Returns the saved settings.\n\t\t @returns Object The settings.\n\t\t */\n\t\tget: function () {\n\t\t\tif (Settings.cfg != null && Settings.cfg._ !== undefined) {\n\t\t\t\treturn Settings.cfg._;\n\t\t\t}\n\t\t\treturn Settings.cfg;\n\t\t},\n\t\t/**\n\t\t Registers a new plugin and calls its use-hook.\n\t\t @param service The plugin to register.\n\t\t @param types The types to bind the plugin to.\n\t\t */\n\t\tregisterPlugin: function (service, types) {\n\t\t\tif (types == null) {\n\t\t\t\ttypes = service.types;\n\t\t\t} else {\n\t\t\t\tservice.types = types;\n\t\t\t}\n\t\t\tif (typeof service.use === 'function') {\n\t\t\t\tservice.use.call(Settings);\n\t\t\t}\n\t\t\tfor (var i = 0; i < types.length; i += 1) {\n\t\t\t\tvar type = types[i].toLowerCase();\n\t\t\t\tif (Settings.plugins[type] == null) {\n\t\t\t\t\tSettings.plugins[type] = service;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t Sets the settings to given ones, resets the fields within given wrapper and saves the settings server-side.\n\t\t @param hash The hash to use as settings-id.\n\t\t @param settings The settings to set.\n\t\t @param wrapper The wrapper-element to find settings within.\n\t\t @param callback The callback to call when done.\n\t\t @param notify Whether to send notification when settings got saved.\n\t\t */\n\t\tset: function (hash, settings, wrapper, callback, notify) {\n\t\t\tif (notify == null) {\n\t\t\t\tnotify = true;\n\t\t\t}\n\t\t\thelper.whenReady(function () {\n\t\t\t\thelper.use(settings);\n\t\t\t\thelper.initFields(wrapper || 'form');\n\t\t\t\thelper.persistSettings(hash, settings, notify, callback);\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t Fetches the settings from server and calls {@link Settings.helper.initFields} once the settings are ready.\n\t\t @param hash The hash to use as settings-id.\n\t\t @param wrapper The wrapper-element to set settings within.\n\t\t @param callback The callback to call when done.\n\t\t */\n\t\tsync: function (hash, wrapper, callback) {\n\t\t\tsocket.emit('admin.settings.get', {\n\t\t\t\thash: hash,\n\t\t\t}, function (err, values) {\n\t\t\t\tif (err) {\n\t\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\thelper.whenReady(function () {\n\t\t\t\t\t\thelper.use(values);\n\t\t\t\t\t\thelper.initFields(wrapper || 'form');\n\t\t\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t Reads the settings from fields and saves them server-side.\n\t\t @param hash The hash to use as settings-id.\n\t\t @param wrapper The wrapper-element to find settings within.\n\t\t @param callback The callback to call when done.\n\t\t @param notify Whether to send notification when settings got saved.\n\t\t */\n\t\tpersist: function (hash, wrapper, callback, notify) {\n\t\t\tvar notSaved = [];\n\t\t\tvar fields = $('[data-key]', wrapper || 'form').toArray();\n\t\t\tif (notify == null) {\n\t\t\t\tnotify = true;\n\t\t\t}\n\t\t\tfor (var i = 0; i < fields.length; i += 1) {\n\t\t\t\tvar field = $(fields[i]);\n\t\t\t\tvar value = helper.readValue(field);\n\t\t\t\tvar parentCfg = Settings.get();\n\t\t\t\tvar keyParts = field.data('key').split('.');\n\t\t\t\tvar lastKey = keyParts[keyParts.length - 1];\n\t\t\t\tif (keyParts.length > 1) {\n\t\t\t\t\tfor (var j = 0; j < keyParts.length - 1; j += 1) {\n\t\t\t\t\t\tvar part = keyParts[j];\n\t\t\t\t\t\tif (part && parentCfg != null) {\n\t\t\t\t\t\t\tparentCfg = parentCfg[part];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (parentCfg != null) {\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tparentCfg[lastKey] = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelete parentCfg[lastKey];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnotSaved.push(field.data('key'));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (notSaved.length) {\n\t\t\t\tapp.alert({\n\t\t\t\t\ttitle: 'Attributes Not Saved',\n\t\t\t\t\tmessage: \"'\" + (notSaved.join(', ')) + \"' could not be saved. Please contact the plugin-author!\",\n\t\t\t\t\ttype: 'danger',\n\t\t\t\t\ttimeout: 5000,\n\t\t\t\t});\n\t\t\t}\n\t\t\thelper.persistSettings(hash, Settings.cfg, notify, callback);\n\t\t},\n\t\tload: function (hash, formEl, callback) {\n\t\t\tcallback = callback || function () {};\n\t\t\tsocket.emit('admin.settings.get', {\n\t\t\t\thash: hash,\n\t\t\t}, function (err, values) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\n\t\t\t\t// Parse all values. If they are json, return json\n\t\t\t\tfor (var key in values) {\n\t\t\t\t\tif (values.hasOwnProperty(key)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!utils.isNumber(values[key])) {\n\t\t\t\t\t\t\t\tvalues[key] = JSON.parse(values[key]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// Leave the value as is\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Save loaded settings into ajaxify.data for use client-side\n\t\t\t\tajaxify.data.settings = values;\n\n\t\t\t\t$(formEl).deserialize(values);\n\t\t\t\t$(formEl).find('input[type=\"checkbox\"]').each(function () {\n\t\t\t\t\t$(this).parents('.mdl-switch').toggleClass('is-checked', $(this).is(':checked'));\n\t\t\t\t});\n\t\t\t\t$(window).trigger('action:admin.settingsLoaded');\n\n\t\t\t\t// Handle unsaved changes\n\t\t\t\t$(formEl).on('change', 'input, select, textarea', function () {\n\t\t\t\t\tapp.flags = app.flags || {};\n\t\t\t\t\tapp.flags._unsaved = true;\n\t\t\t\t});\n\n\t\t\t\tcallback(null, values);\n\t\t\t});\n\t\t},\n\t\tsave: function (hash, formEl, callback) {\n\t\t\tformEl = $(formEl);\n\t\t\tif (formEl.length) {\n\t\t\t\tvar values = formEl.serializeObject();\n\t\t\t\t// \"Fix\" checkbox values, so that unchecked options are not omitted\n\t\t\t\tformEl.find('input[type=\"checkbox\"]').each(function (idx, inputEl) {\n\t\t\t\t\tinputEl = $(inputEl);\n\t\t\t\t\tif (!inputEl.is(':checked')) {\n\t\t\t\t\t\tvalues[inputEl.attr('name')] = 'off';\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Normalizing value of multiple selects\n\t\t\t\tformEl.find('select[multiple]').each(function (idx, selectEl) {\n\t\t\t\t\tselectEl = $(selectEl);\n\t\t\t\t\tvalues[selectEl.attr('name')] = JSON.stringify(selectEl.val());\n\t\t\t\t});\n\n\t\t\t\tsocket.emit('admin.settings.set', {\n\t\t\t\t\thash: hash,\n\t\t\t\t\tvalues: values,\n\t\t\t\t}, function (err) {\n\t\t\t\t\t// Remove unsaved flag to re-enable ajaxify\n\t\t\t\t\tapp.flags._unsaved = false;\n\n\t\t\t\t\t// Also save to local ajaxify.data\n\t\t\t\t\tajaxify.data.settings = values;\n\n\t\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t} else if (err) {\n\t\t\t\t\t\tapp.alert({\n\t\t\t\t\t\t\ttitle: 'Error while saving settings',\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\ttimeout: 2500,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tapp.alert({\n\t\t\t\t\t\t\ttitle: 'Settings Saved',\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\ttimeout: 2500,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t};\n\n\n\thelper.registerReadyJobs(1);\n\trequire(DEFAULT_PLUGINS, function () {\n\t\tfor (var i = 0; i < arguments.length; i += 1) {\n\t\t\tSettings.registerPlugin(arguments[i]);\n\t\t}\n\t\thelper.beforeReadyJobsDecreased();\n\t});\n\n\treturn Settings;\n});\n"]}