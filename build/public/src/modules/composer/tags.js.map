{"version":3,"sources":["node_modules/nodebb-plugin-composer-default/static/lib/composer/tags.js"],"names":["define","tags","init","postContainer","postData","tagEl","find","length","tagsinput","maxTags","config","maximumTagsPerTopic","maxChars","maximumTagLength","confirmKeys","trimValue","on","event","cleanTag","utils","cleanUpTag","item","different","cancel","minimumTagLength","app","alertError","cid","hasOwnProperty","ajaxify","data","socket","emit","tag","err","allowed","$","window","trigger","addTags","input","toggleTagInput","loadJQueryUI","autocomplete","delay","position","my","at","collision","open","this","css","source","request","response","query","term","message","attr","select","ui","triggerEnter","onChangeCategory","get","tagDropdown","toggleClass","tagWhitelist","parseAndTranslate","html","removeAttr","privileges","tagsInput","e","jQuery","Event","which","keyCode","setTimeout","i","getTags","post_uuid"],"mappings":"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","file":"node_modules/nodebb-plugin-composer-default/static/lib/composer/tags.js","sourcesContent":["\r\n'use strict';\r\n\r\n/*globals ajaxify, define, config, socket, app, utils*/\r\n\r\ndefine('composer/tags', function() {\r\n\tvar tags = {};\r\n\r\n\ttags.init = function(postContainer, postData) {\r\n\t\tvar tagEl = postContainer.find('.tags');\r\n\t\tif (!tagEl.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttagEl.tagsinput({\r\n\t\t\tmaxTags: config.maximumTagsPerTopic,\r\n\t\t\tmaxChars: config.maximumTagLength,\r\n\t\t\tconfirmKeys: [13, 44],\r\n\t\t\ttrimValue: true\r\n\t\t});\r\n\r\n\t\ttagEl.on('beforeItemAdd', function(event) {\r\n\t\t\tvar cleanTag = utils.cleanUpTag(event.item, config.maximumTagLength);\r\n\t\t\tvar different = cleanTag !== event.item;\r\n\t\t\tevent.cancel = different || event.item.length < config.minimumTagLength || event.item.length > config.maximumTagLength;\r\n\t\t\tif (event.item.length < config.minimumTagLength) {\r\n\t\t\t\treturn app.alertError('[[error:tag-too-short, ' + config.minimumTagLength + ']]');\r\n\t\t\t} else if (event.item.length > config.maximumTagLength) {\r\n\t\t\t\treturn app.alertError('[[error:tag-too-long, ' + config.maximumTagLength + ']]');\r\n\t\t\t}\r\n\t\t\tif (different) {\r\n\t\t\t\ttagEl.tagsinput('add', cleanTag);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\ttagEl.on('itemAdded', function(event) {\r\n\t\t\tvar cid = postData.hasOwnProperty('cid') ? postData.cid : ajaxify.data.cid;\r\n\t\t\tsocket.emit('topics.isTagAllowed', {tag: event.item, cid: cid}, function(err, allowed) {\r\n\t\t\t\tif (err || !allowed) {\r\n\t\t\t\t\treturn tagEl.tagsinput('remove', event.item);\r\n\t\t\t\t}\r\n\t\t\t\t$(window).trigger('action:tag.added', {cid: cid, tagEl: tagEl, tag: event.item});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\taddTags(postData.tags, tagEl);\r\n\r\n\t\tvar input = postContainer.find('.bootstrap-tagsinput input');\r\n\t\ttoggleTagInput(postContainer, postData, ajaxify.data);\r\n\r\n\t\tapp.loadJQueryUI(function() {\r\n\t\t\tinput.autocomplete({\r\n\t\t\t\tdelay: 100,\r\n\t\t\t\tposition: { my: \"left bottom\", at: \"left top\", collision: \"flip\" },\r\n\t\t\t\topen: function() {\r\n\t\t\t\t\t$(this).autocomplete('widget').css('z-index', 20000);\r\n\t\t\t\t},\r\n\t\t\t\tsource: function(request, response) {\r\n\t\t\t\t\tsocket.emit('topics.autocompleteTags', {query: request.term, cid: postData.cid}, function(err, tags) {\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\treturn app.alertError(err.message);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (tags) {\r\n\t\t\t\t\t\t\tresponse(tags);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$('.ui-autocomplete a').attr('data-ajaxify', 'false');\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tselect: function(event, ui) {\r\n\t\t\t\t\t// when autocomplete is selected from the dropdown simulate a enter key down to turn it into a tag\r\n\t\t\t\t\ttriggerEnter(input);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tinput.attr('tabIndex', tagEl.attr('tabIndex'));\r\n\t\tinput.attr('size', tagEl.attr('placeholder').length);\r\n\t\tinput.on('blur', function() {\r\n\t\t\ttriggerEnter(input);\r\n\t\t});\r\n\r\n\t\t$('[component=\"composer/tag/dropdown\"]').on('click', 'li', function () {\r\n\t\t\tvar tag = $(this).attr('data-tag');\r\n\t\t\tif (tag) {\r\n\t\t\t\taddTags([tag], tagEl);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t});\r\n\t};\r\n\r\n\ttags.onChangeCategory = function (postContainer, postData, cid) {\r\n\t\t$.get('/api/category/' + cid, function (data) {\r\n\t\t\tvar tagDropdown = postContainer.find('[component=\"composer/tag/dropdown\"]');\r\n\t\t\tif (!tagDropdown.length) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\ttoggleTagInput(postContainer, postData, data);\r\n\t\t\ttagDropdown.toggleClass('hidden', !data.tagWhitelist.length);\r\n\t\t\tapp.parseAndTranslate('composer', 'tagWhitelist', {tagWhitelist: data.tagWhitelist}, function (html) {\r\n\t\t\t\ttagDropdown.find('.dropdown-menu').html(html);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tfunction toggleTagInput(postContainer, postData, data) {\r\n\t\tvar input = postContainer.find('.bootstrap-tagsinput input');\r\n\t\tif (!input.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (data.tagWhitelist && data.tagWhitelist.length) {\r\n\t\t\tinput.attr('readonly', '');\r\n\t\t\tinput.attr('placeholder', '');\r\n\t\t} else {\r\n\t\t\tinput.removeAttr('readonly');\r\n\t\t\tinput.attr('placeholder', postContainer.find('input.tags').attr('placeholder'));\r\n\t\t}\r\n\r\n\t\tpostContainer.find('.tags-container').toggleClass('hidden', (data.privileges && !data.privileges['topics:tag']) || (config.maximumTagsPerTopic === 0 && !postData.tags.length));\r\n\r\n\t\tif (data.privileges && !data.privileges['topics:tag']) {\r\n\t\t\tpostContainer.find('.tags').tagsinput('removeAll');\r\n\t\t}\r\n\r\n\t\t$(window).trigger('action:tag.toggleInput', {\r\n\t\t\tpostContainer: postContainer,\r\n\t\t\ttagWhitelist: data.tagWhitelist,\r\n\t\t\ttagsInput: input,\r\n\t\t});\r\n\t}\r\n\r\n\tfunction triggerEnter(input) {\r\n\t\t// http://stackoverflow.com/a/3276819/583363\r\n\t\tvar e = jQuery.Event('keypress');\r\n\t\te.which = 13;\r\n\t\te.keyCode = 13;\r\n\t\tsetTimeout(function() {\r\n\t\t\tinput.trigger(e);\r\n\t\t}, 100);\r\n\t}\r\n\r\n\tfunction addTags(tags, tagEl) {\r\n\t\tif (tags && tags.length) {\r\n\t\t\tfor (var i=0; i<tags.length; ++i) {\r\n\t\t\t\ttagEl.tagsinput('add', tags[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\ttags.getTags = function(post_uuid) {\r\n\t\treturn $('#cmp-uuid-' + post_uuid + ' .tags').tagsinput('items');\r\n\t};\r\n\r\n\treturn tags;\r\n});\r\n"]}